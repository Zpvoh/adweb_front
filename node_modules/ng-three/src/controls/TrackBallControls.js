import { EventDispatcher } from '../core/EventDispatcher';
import { Vector2 } from '../math/Vector2';
import { Vector3 } from '../math/Vector3';
import { Quaternion } from '../math/Quaternion'

/**
 * @author Eberhard Graether / http://egraether.com/
 * @author Mark Lundin 	/ http://mark-lundin.com
 * @author Simone Manini / http://daron1337.github.io
 * @author Luca Antiga 	/ http://lantiga.github.io

 ** THREE trackballcontrols module
 ** @author Jon Lim / http://jonlim.ca
 **
 ** Edited for Angular Export + @types
 ** @author BentBot / http://hogan.re
 */

// states
var touchstates = { NONE: -1, ROTATE: 0, ZOOM: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_ZOOM_PAN: 4 };
var screen = { left: 0, top: 0, width: 0, height: 0 };


var _lastAngle = 0,
	_eye = new Vector3(0,0,0),
	_lastMove = new Vector3(0,0,0),
	_movePrev = new Vector2(0,0),
	_moveCursor = new Vector2(0,0),
	_lastAxis = new Vector3(0,0,0),
	_zoomStart = new Vector2(0,0),
	_zoomEnd = new Vector2(0,0),
	_panStart = new Vector2(0,0),
	_panEnd = new Vector2(0,0);



// events
var changeEvent = new Event('change');
var startEvent = new Event('start');
var endEvent = new Event('end');

var getMouseOnScreen = ( function () {
		var vector = new Vector2(0,0);
		return function getMouseOnScreen( pageX, pageY ) {
			vector.set(
				( pageX - screen.left ) / screen.width,
				( pageY - screen.top ) / screen.height
			);
			return vector;
		};
}() );

var getMouseOnCircle = ( function () {
	var vector = new Vector2(0,0);
	return function getMouseOnCircle( pageX, pageY ) {
		vector.set(
			( ( pageX - screen.width * 0.5 - screen.left ) / ( screen.width * 0.5 ) ),
			( ( screen.height + 2 * ( screen.top - pageY ) ) / screen.width ) // screen.width intentional
		);
		return vector;
	};
}() );





function TrackballControls ( object, domElement ) {

	function preventEvent( event ) { event.preventDefault(); }

	this.object = object;
	this.domElement = ( domElement !== undefined ) ? domElement : document;

	// API
	this.enabled = true;

	this.rotateSpeed = 1.0;
	this.zoomSpeed = 1.2;
	this.panSpeed = 0.3;

	this.noRotate = false;
	this.noZoom = false;
	this.noPan = false;

	this.staticMoving = false;
	this.dynamicDampingFactor = 0.2;

	this.minDistance = 0;
	this.maxDistance = Infinity;

	/**
	 * `KeyboardEvent.keyCode` values which should trigger the different 
	 * interaction touchstates. Each element can be a single code or an array
	 * of codes. All elements are required.
	 */
	this.keys = [ 65 /*A*/, 83 /*S*/, 68 /*D*/ ];

	// internals

	this.target = new Vector3(0,0,0);

	this.EPS = 0.000001;
	this.state = touchstates.NONE;
	this.prevState = touchstates.NONE;

	this.touchZoomDistanceStart = 0;
	this.touchZoomDistanceEnd = 0;

	// for reset

	this.target0 = this.target.clone();
	this.position0 = this.object.position.clone();
	this.up0 = this.object.up.clone();


	this.domElement.addEventListener( 'contextmenu', this.contextmenu, false );
	this.domElement.addEventListener( 'mousedown', this.mousedown, false );
	this.domElement.addEventListener( 'wheel', this.mousewheel, false );

	this.domElement.addEventListener( 'touchstart', this.touchstart, false );
	this.domElement.addEventListener( 'touchend', this.touchend, false );
	this.domElement.addEventListener( 'touchmove', this.touchmove, false );

	window.addEventListener( 'keydown', this.keydown, false );
	window.addEventListener( 'keyup', this.keyup, false );

	console.log('trackballcontrols')

	//this.handleResize();

	// force an update at start
	this.update();

}




Object.assign( TrackballControls.prototype, EventDispatcher.prototype, {


	// dispatchEvent: function(event) {
	// 	thjidispatchEvent(event);

	// },


	rotateCamera: function() {

		var axis = new Vector3(0,0,0),
			quaternion = new Quaternion(),
			eyeDirection = new Vector3(0,0,0),
			objectUpDirection = new Vector3(0,0,0),
			objectSidewaysDirection = new Vector3(0,0,0),
			moveDirection = new Vector3(0,0,0),
			angle;

		moveDirection.set( _moveCursor.x - _lastMove.x, _moveCursor.y - _lastMove.y, 0 );
		angle = moveDirection.length();

		// console.log(_moveCursor.x - _lastMove.x, _moveCursor.y - _lastMove.y, 0);

		if ( angle ) {

			_eye.copy( this.object.position ).sub( this.target );

			eyeDirection.copy( _eye ).normalize();
			objectUpDirection.copy( this.object.up ).normalize();
			objectSidewaysDirection.crossVectors( objectUpDirection, eyeDirection ).normalize();

			objectUpDirection.setLength( _moveCursor.y - _lastMove.y );
			objectSidewaysDirection.setLength( _moveCursor.x - _lastMove.x );

			moveDirection.copy( objectUpDirection.add( objectSidewaysDirection ) );

			axis.crossVectors( moveDirection, _eye ).normalize();

			angle *= this.rotateSpeed;
			quaternion.setFromAxisAngle( axis, angle );

			_eye.applyQuaternion( quaternion );
			this.object.up.applyQuaternion( quaternion );
			_lastAxis.copy( axis );
			_lastAngle = angle;

		} else if ( ! this.staticMoving && _lastAngle ) {

			_lastAngle *= Math.sqrt( 1.0 - this.dynamicDampingFactor );
			_eye.copy( this.object.position ).sub( this.target );
			quaternion.setFromAxisAngle( _lastAxis, _lastAngle );
			_eye.applyQuaternion( quaternion );
			this.object.up.applyQuaternion( quaternion );

		}

		_lastMove.copy( _moveCursor );

	},


	panCamera: function() {

		var mouseChange = new Vector2(),
			objectUp = new Vector3(),
			pan = new Vector3();

		return function panCamera() {

			var mouseChange = new Vector2(0,0),
				objectUp = new Vector3(0,0,0),
				pan = new Vector3(0,0,0);

			mouseChange.copy( _panEnd ).sub( _panStart );

			if ( mouseChange.lengthSq() ) {

				mouseChange.multiplyScalar( _eye.length() * this.panSpeed );

				pan.copy( _eye ).cross( this.object.up ).setLength( mouseChange.x );
				pan.add( objectUp.copy( this.object.up ).setLength( mouseChange.y ) );

				this.object.position.add( pan );
				this.target.add( pan );

				if ( this.staticMoving ) {

					_panStart.copy( _panEnd );

				} else {

					_panStart.add( mouseChange.subVectors( _panEnd, _panStart ).multiplyScalar( this.dynamicDampingFactor ) );

				}

			}

		};

	},


	zoomCamera: function() {

		var factor;

		var _zoomStart = new Vector2(0,0);
		var _zoomEnd = new Vector2(0,0);

		if ( this.state === touchstates.TOUCH_ZOOM_PAN ) {

			factor = this.touchZoomDistanceStart / this.touchZoomDistanceEnd;
			this.touchZoomDistanceStart = this.touchZoomDistanceEnd;
			_eye.multiplyScalar( factor );

		} else {

			factor = 1.0 + ( _zoomEnd.y - _zoomStart.y ) * this.zoomSpeed;

			if ( factor !== 1.0 && factor > 0.0 ) {

				_eye.multiplyScalar( factor );

			}

			if ( this.staticMoving ) {

				_zoomStart.copy( _zoomEnd );

			} else {

				_zoomStart.y += ( _zoomEnd.y - _zoomStart.y ) * this.dynamicDampingFactor;

			}

		}

	},

	// methods
	handleResize: function () {

		if ( this.domElement === document ) {

			screen.left = 0;
			screen.top = 0;
			screen.width = window.innerWidth;
			screen.height = window.innerHeight;

		} else {

			var box = this.domElement.getBoundingClientRect();
			// adjustments come from similar code in the jquery offset() function
			var d = this.domElement.ownerDocument.documentElement;
			screen.left = box.left + window.pageXOffset - d.clientLeft;
			screen.top = box.top + window.pageYOffset - d.clientTop;
			screen.width = box.width;
			screen.height = box.height;

		}

	},

	handleEvent: function ( event ) {

		if ( typeof this[ event.type ] == 'function' ) {

			this[ event.type ]( event );

		}

	},

	checkDistances: function () {
		_zoomStart = new Vector2(0,0);
		_zoomEnd = new Vector2(0,0);
		if ( ! this.noZoom || ! this.noPan ) {

			if ( _eye.lengthSq() > this.maxDistance * this.maxDistance ) {

				this.object.position.addVectors( this.target, _eye.setLength( this.maxDistance ) );
				_zoomStart.copy( _zoomEnd );

			}

			if ( _eye.lengthSq() < this.minDistance * this.minDistance ) {

				this.object.position.addVectors( this.target, _eye.setLength( this.minDistance ) );
				_zoomStart.copy( _zoomEnd );

			}

		}

	},

	update: function () {

		_eye.subVectors( this.object.position, this.target );

		if ( ! this.noRotate ) {

			this.rotateCamera();

		}

		if ( ! this.noZoom ) {

			this.zoomCamera();

		}

		if ( ! this.noPan ) {

			this.panCamera();

		}

		this.object.position.addVectors( this.target, _eye );

		this.checkDistances();

		this.object.lookAt( this.target );

		if ( _lastMove.distanceToSquared( this.object.position ) > this.EPS ) {

			this.dispatchEvent( changeEvent );

			_lastMove.copy( this.object.position );

		}

	},

	reset: function () {
		
		this.state = touchstates.NONE;
		this.prevState = touchstates.NONE;

		this.target.copy( this.target0 );
		this.object.position.copy( this.position0 );
		this.object.up.copy( this.up0 );

		_eye.subVectors( this.object.position, this.target );

		this.object.lookAt( this.target );

		this.dispatchEvent( changeEvent );

		_lastMove.copy( this.object.position );

	},

	// helpers

	/**
	 * Checks if the pressed key is any of the configured modifier keys for
	 * a specified behavior.
	 * 
	 * @param {number | number[]} keys 
	 * @param {number} key 
	 * 
	 * @returns {boolean} `true` if `keys` contains or equals `key`
	 */
	containsKey: function(keys, key) {
		if (Array.isArray(keys)) {
			return keys.indexOf(key) !== -1;
		} else {
			return keys === key;
		}
	},

	// listeners

	keydown: function( event ) {

		if ( this.enabled === false ) return;

		window.removeEventListener( 'keydown', this.keydown );

		this.prevState = this.state;
		
		if ( this.state !== touchstates.NONE ) {

			return;

		} else if ( containsKey( this.keys[ touchstates.ROTATE ], event.keyCode ) && ! this.noRotate ) {

			this.state = touchstates.ROTATE;

		} else if ( containsKey( this.keys[ touchstates.ZOOM ], event.keyCode ) && ! this.noZoom ) {

			this.state = touchstates.ZOOM;

		} else if ( containsKey( this.keys[ touchstates.PAN ], event.keyCode ) && ! this.noPan ) {

			this.state = touchstates.PAN;

		}

	},

	keyup: function( event ) {
		
		if ( this.enabled === false ) return;

		this.state = this.prevState;

		window.addEventListener( 'keydown', this.keydown, false );

	},

	mousedown: function( event ) {

		if ( this.enabled === false ) return;

		event.preventDefault();
		event.stopPropagation();

		this.state = event.button;

		if ( this.state === touchstates.ROTATE && ! this.noRotate ) {

			_moveCursor.copy( getMouseOnCircle( event.pageX, event.pageY ) );
			_lastMove.copy( _moveCursor );
			console.log('getMouseOnCircle', getMouseOnCircle( event.pageX, event.pageY ));
			console.log('_lastMove', _moveCursor);

		} else if ( this.state === touchstates.ZOOM && ! this.noZoom ) {

			_zoomStart.copy( getMouseOnScreen( event.pageX, event.pageY ) );
			_zoomEnd.copy( _zoomStart );
			console.log('_zoomEnd', _zoomEnd);

		} else if ( this.state === touchstates.PAN && ! this.noPan ) {

			_panStart.copy( getMouseOnScreen( event.pageX, event.pageY ) );
			_panEnd.copy( _panStart );
			console.log('_panEnd', _panEnd);

		}


		document.addEventListener( 'mousemove', this.mousemove, false );
		document.addEventListener( 'mouseup', this.mouseup, false );

		this.dispatchEvent( startEvent );

	},

	mousemove: function( event ) {
		if ( this.enabled === false ) return;


		event.preventDefault();
		event.stopPropagation();

		if ( this.state === touchstates.ROTATE && ! this.noRotate ) {

			_lastMove.copy( _moveCursor );
			_moveCursor.copy( getMouseOnCircle( event.pageX, event.pageY ) );
			console.log('_moveCursor', _moveCursor);
		} else if ( this.state === touchstates.ZOOM && ! this.noZoom ) {

			_zoomEnd.copy( getMouseOnScreen( event.pageX, event.pageY ) );
			console.log('_zoomEnd', _zoomEnd);
		} else if ( this.state === touchstates.PAN && ! this.noPan ) {

			_panEnd.copy( getMouseOnScreen( event.pageX, event.pageY ) );
			console.log('_panEnd', _panEnd);
		}

	},

	mouseup: function( event ) {
		if ( this.enabled === false ) return;

		event.preventDefault();
		event.stopPropagation();

		this.state = touchstates.NONE;

		document.removeEventListener( 'mousemove', this.mousemove );
		document.removeEventListener( 'mouseup', this.mouseup );
		this.dispatchEvent( endEvent );

	},

	mousewheel: function( event ) {
		if ( this.enabled === false ) return;

		event.preventDefault();
		event.stopPropagation();

		_zoomStart = new Vector2(0,0);
		_zoomEnd = new Vector2(0,0);

		switch ( event.deltaMode ) {

			case 2:
				// Zoom in pages
				_zoomStart.y -= event.deltaY * 0.025;
				break;

			case 1:
				// Zoom in lines
				_zoomStart.y -= event.deltaY * 0.01;
				break;

			default:
				// undefined, 0, assume pixels
				_zoomStart.y -= event.deltaY * 0.00025;
				break;

		}

		this.dispatchEvent( startEvent );
		this.dispatchEvent( endEvent );

	},

	touchstart: function( event ) {
		if ( this.enabled === false ) return;
		
		switch ( event.touches.length ) {

			case 1:
				this.state = touchstates.TOUCH_ROTATE;
				_moveCursor.copy( getMouseOnCircle( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY ) );
				_lastMove.copy( _moveCursor );
				break;

			default: // 2 or more
				this.state = touchstates.TOUCH_ZOOM_PAN;
				var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
				var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;
				this.touchZoomDistanceEnd = this.touchZoomDistanceStart = Math.sqrt( dx * dx + dy * dy );

				var x = ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX ) / 2;
				var y = ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY ) / 2;
				_panStart.copy( getMouseOnScreen( x, y ) );
				_panEnd.copy( _panStart );
				break;

		}

		this.dispatchEvent( startEvent );

	},

	touchmove: function( event ) {
		if ( this.enabled === false ) return;

		event.preventDefault();
		event.stopPropagation();

		switch ( event.touches.length ) {

			case 1:
				_lastMove.copy( _moveCursor );
				_moveCursor.copy( getMouseOnCircle( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY ) );
				break;

			default: // 2 or more
				var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
				var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;
				this.touchZoomDistanceEnd = Math.sqrt( dx * dx + dy * dy );

				var x = ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX ) / 2;
				var y = ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY ) / 2;
				_panEnd.copy( getMouseOnScreen( x, y ) );
				break;

		}

	},

	touchend: function( event ) {
		if ( this.enabled === false ) return;

		switch ( event.touches.length ) {

			case 0:
				this.state = touchstates.NONE;
				break;

			case 1:
				this.state = touchstates.TOUCH_ROTATE;
				_moveCursor.copy( getMouseOnCircle( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY ) );
				_lastMove.copy( _moveCursor );
				break;

		}

		this.dispatchEvent( endEvent );

	},

	contextmenu: function( event ) {

		if ( this.enabled === false ) return;

		event.preventDefault();

	},

	dispose: function() {

		this.domElement.removeEventListener( 'contextmenu', this.contextmenu, false );
		this.domElement.removeEventListener( 'mousedown', this.mousedown, false );
		this.domElement.removeEventListener( 'wheel', this.mousewheel, false );

		this.domElement.removeEventListener( 'touchstart', this.touchstart, false );
		this.domElement.removeEventListener( 'touchend', this.touchend, false );
		this.domElement.removeEventListener( 'touchmove', this.touchmove, false );

		document.removeEventListener( 'mousemove', this.mousemove, false );
		document.removeEventListener( 'mouseup', this.mouseup, false );

		window.removeEventListener( 'keydown', this.keydown, false );
		window.removeEventListener( 'keyup', this.keyup, false );

	}

});

export { TrackballControls };